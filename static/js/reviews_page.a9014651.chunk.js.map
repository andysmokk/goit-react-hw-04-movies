{"version":3,"sources":["components/Reviews/Reviews.jsx"],"names":["Reviews","movieId","useState","reviews","setReviews","useEffect","moviesAPI","fetchMovieReviews","then","data","results","console","log","length","map","review","author","content","id"],"mappings":"0NAIe,SAASA,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KASA,OAPAC,qBAAU,WACRC,IAAUC,kBAAkBN,GAASO,MAAK,SAAAC,GAAI,OAAIL,EAAWK,EAAKC,cACjE,CAACT,IAEJU,QAAQC,IAAIT,EAAQU,QACpBF,QAAQC,IAAIX,GAEc,IAAnBE,EAAQU,OACb,6BACGV,GACCA,EAAQW,KAAI,SAAAC,GAAM,OAChB,+BACE,4BAAIA,EAAOC,SACX,4BAAID,EAAOE,YAFJF,EAAOG,SAOtB","file":"static/js/reviews_page.a9014651.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moviesAPI from '../../services/moviesApi';\r\n\r\nexport default function Reviews({ movieId }) {\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    moviesAPI.fetchMovieReviews(movieId).then(data => setReviews(data.results));\r\n  }, [movieId]);\r\n\r\n  console.log(reviews.length);\r\n  console.log(movieId);\r\n\r\n  return reviews.length !== 0 ? (\r\n    <ul>\r\n      {reviews &&\r\n        reviews.map(review => (\r\n          <li key={review.id}>\r\n            <p>{review.author}</p>\r\n            <p>{review.content}</p>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  ) : (\r\n    <p>We don't have any reviews for this movie</p>\r\n  );\r\n}\r\n\r\nReviews.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n};\r\n"],"sourceRoot":""}